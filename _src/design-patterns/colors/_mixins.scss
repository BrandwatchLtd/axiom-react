@import '../colors/_vars.js';

//////////////////////////////
// Exponent
//////////////////////////////
@function exponent($base, $exponent) {
  // reset value
  $value: $base;
  // positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }

  // negitive intergers get divided. A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  // return the last value written
  @return $value;
}

@function pow($base, $exponent) {
  @return exponent($base, $exponent);
}


//
@function get-color($color-set, $variation: $color-base-variation) {
  @if (type-of($color-set) == color) {
    @return $color-set;
  }

  @if (map-has-key($color-set, _)) {
    @return map-get($color-set, _);
  }

  @if (map-has-key($color-set, $variation)) {
    @return map-get($color-set, $variation);
  }
}

//
@function get-accent-color($color-set, $variation: $color-accent-base-variation) {
  @return get-color($color-set, $variation);
}

//
@function get-color-set($color) {
  @if (type-of($color-set) == map) {
    @return $color;
  }

  $index: 1;
  $length: length($color-palette);

  @each $name, $color-set in $color-palette {
    @each $variation, $hex in $color-set {
      @if ($hex == $color) {
        @return $color-set;
      }
    }
  }

  @return false;
}

// https://css-tricks.com/snippets/sass/luminance-color-function/
// https://en.wikipedia.org/wiki/Relative_luminance
@function luminance($color) {
  $colors: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: $value / 255;

    @if $value < .03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + .055) / 1.055;
      $value: pow($value, 2.4);
    }

    $colors: map-merge($colors, ($name: $value));
  }

  @return (
  ( map-get($colors, 'red') * .2126 ) +
    ( map-get($colors, 'green') * .7152 ) +
      ( map-get($colors, 'blue') * .0722 )
  );
}


//
@function get-contrasting-color($color, $light, $dark) {
  @if (luminance($color) > $color-luminance-point) {
    @return $dark;
  } @else {
    @return $light;
  }
}

@function get-text-color($color) {
  @return get-contrasting-color($color, $color-text-light, $color-text-dark);
}


///
$_color: false;

@mixin for-each-palette-color {
  @each $color-palette-group in $color-palette {
    @each $color-item in $color-palette-group {
      $_color: $color-item !global;
      @content;
    }
  }

  $_color: false !global;
}

@mixin for-each-alias-color {
  @each $color-alias-group in $color-aliases {
    $colors: map-get($color-alias-group, colors);

    @each $color-group in $colors {
      @each $color-item in $color-group {
        $_color: $color-item !global;
        @content;
      }
    }
  }

  $_color: false !global;
}

@mixin for-each-color {
  @include for-each-palette-color {
    @content;
  }

  @include for-each-alias-color {
    @content;
  }
}

@function color-prop($prop, $color: $_color) {
  @if (map-has-key($color, $prop)) {
    @return map-get($color, $prop);
  } @else {
    @warn 'Color property `#{$prop}` does not exists';
  }
}
